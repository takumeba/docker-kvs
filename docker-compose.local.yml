# docker-compose.yml for frontend engineer1
version: '3.7'

services:
  # WebTest: Webフロントのテスト
  # 必要な静的なファイルを取得できるかチェック
  # Seleniumを使って、GUI操作のテストをする
  webtest:
    build:
      context: ./webtest
      dockerfile: Dockerfile
    container_name: mykvs-webtest
    restart: always
    depends_on:
      - web
    tty: true
    environment:
      WEB_HOST: web
      WEB_PORT: 80

  # AppTest: REST API Test
  # Appにたいして、REST APIのリクエストを投げて、
  # 期待されるレスポンスが得れるかテストする
  apptest:
    build:
      context: ./apptest
      dockerfile: Dockerfile
    container_name: mykvs-apptest
    restart: always
    depends_on:
      - app
    tty: true
    environment:
      APP_HOST: app
      APP_PORT: 80


  # Web: Static and Reverse Proxy
  # HTMLなどの静的なファイルの処理
  # /api/v1/宛の通信はappserverに流す
  web: 
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: mykvs-web
    restart: always
    depends_on:
      - app
    ports:
      - 80:80

  # App: Rest API for Key Value Store
  # Webから流されたREST APIの処理を担当。
  # APIを解釈し、裏のRedis(DB相当)を操作する。
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: mykvs-app
    restart: always
    depends_on:
      - db
    environment:
      REDIS_HOST: db
      REDIS_PORT: 6379
      REDIS_DB: 0

  # DB: Key Value Store
  # AppからのRedis操作への応答
  # Redisをそのまま利用
  db:
    image: redis:5.0.6-alpine3.10
    restart: always
    container_name: mykvs-db
    volumes:
      - redis_volume:/data

volumes:
  redis_volume:
    driver: local